name: Deploy Reverse Proxy to ECS

on:
  push:
    branches:
      - dev

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout del codice
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Configura le credenziali AWS
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-south-1

      # Step 3: Login a Amazon ECR
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      # Step 4: Verifica se il repository ECR esiste, altrimenti crealo
      - name: Ensure ECR Repository Exists
        run: |
          aws ecr describe-repositories --region eu-south-1 --repository-names reverse-proxy || \
          aws ecr create-repository --region eu-south-1 --repository-name reverse-proxy
          
      # Step 5: Build e Push dell'immagine Docker
      - name: Build and Push Docker Image
        env:
          IMAGE_NAME: reverse-proxy
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          REGION=eu-south-1

          # Build dell'immagine Docker
          docker build -t $IMAGE_NAME .

          # Tagging dell'immagine
          docker tag $IMAGE_NAME:latest $AWS_ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$IMAGE_NAME:latest

          # Push dell'immagine su Amazon ECR
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$IMAGE_NAME:latest

      # Step 6: Recupera configurazioni da Terraform
      - name: Retrieve Configuration
        run: |
          aws s3 cp s3://shared-state/environments/dev/terraform.tfstate terraform.tfstate
          CLUSTER_NAME=$(jq -r '.outputs.ecs_cluster_id.value' terraform.tfstate)
          SUBNETS=$(jq -r '.outputs.public_subnet_ids.value | join(",")' terraform.tfstate)
          SG_ID=$(jq -r '.outputs.reverse_proxy_sg_id.value' terraform.tfstate)

          echo "CLUSTER_NAME=$CLUSTER_NAME" >> $GITHUB_ENV
          echo "SUBNETS=$SUBNETS" >> $GITHUB_ENV
          echo "SG_ID=$SG_ID" >> $GITHUB_ENV

      # Step 7: Aggiorna il file della Task Definition
      - name: Update Task Definition
        run: |
          cp task-definition.json task-definition-updated.json
          sed -i "s|<IMAGE_PLACEHOLDER>|$AWS_ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$IMAGE_NAME:latest|g" task-definition-updated.json

      # Step 8: Registra la Task Definition aggiornata
      - name: Register Task Definition
        run: |
          aws ecs register-task-definition --cli-input-json file://task-definition-updated.json

      # Step 9: Crea il servizio ECS se non esiste
      - name: Create ECS Service if not exists
        run: |
          # Verifica se il servizio esiste
          SERVICE_EXISTS=$(aws ecs describe-services --cluster $CLUSTER_NAME --services reverse-proxy-dev --query "services[0].serviceName" --output text)

          # Crea il servizio se non esiste
          if [ "$SERVICE_EXISTS" == "None" ]; then
            aws ecs create-service \
              --cluster $CLUSTER_NAME \
              --services reverse-proxy-dev \
              --task-definition reverse-proxy-dev \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[$SUBNETS],securityGroups=[$SG_ID],assignPublicIp=ENABLED}" \
              --force-new-deployment
          fi

      # Step 10: Aggiorna il servizio ECS
      - name: Update ECS Service
        run: |
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service reverse-proxy-dev \
            --task-definition reverse-proxy-dev \
            --network-configuration "awsvpcConfiguration={subnets=[$SUBNETS],securityGroups=[$SG_ID],assignPublicIp=ENABLED}" \
            --force-new-deployment